{
	"compiler": {
		"version": "0.8.7+commit.e28d00a7"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_core",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_timer",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "IDENTIFIER",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_subIdentifier",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "_subImplementation",
						"type": "address"
					}
				],
				"name": "addSubSystem",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "core_",
				"outputs": [
					{
						"internalType": "contract ICore",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getCurrentTime",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_system",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "_subIdentifier",
						"type": "bytes32"
					}
				],
				"name": "getSubSystem",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_exeID",
						"type": "bytes32"
					}
				],
				"name": "isExecutable",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_propID",
						"type": "uint256"
					}
				],
				"name": "isVotable",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_propID",
						"type": "uint256"
					}
				],
				"name": "queueProposal",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "time",
						"type": "uint256"
					}
				],
				"name": "setCurrentTime",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_exeID",
						"type": "bytes32"
					}
				],
				"name": "setExecute",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "timerAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_propID",
						"type": "uint256"
					}
				],
				"name": "voting",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"getCurrentTime()": {
					"returns": {
						"_0": "uint for the current Testable timestamp."
					}
				},
				"isExecutable(bytes32)": {
					"details": "The reason we use Exe IDs here and not Prop IDs is that          executables may be valid for execution outside of a proposal          (e.g an approved recurring payment). If the exe is tied to a          proposal the coordinator will be able to look up and verify it's          executable status.",
					"params": {
						"_exeID": "ID of the executable to check."
					}
				},
				"setCurrentTime(uint256)": {
					"details": "Will revert if not running in test mode.",
					"params": {
						"time": "timestamp to set current Testable time to."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"getCurrentTime()": {
					"notice": "Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp."
				},
				"isExecutable(bytes32)": {
					"notice": "This function will check that the specified proposal has reached          quorum, and that it has passed. If the proposal has not reached          quorum or has not passed this will return false."
				},
				"setCurrentTime(uint256)": {
					"notice": "Sets the current time."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/Coordinator.sol": "Coordinator"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/BaseSystem.sol": {
			"keccak256": "0xa99bf691527d26616edc6bee878f5b7d004fcdc07c7faea6818df6aa5cb5cabc",
			"license": "MIT",
			"urls": [
				"bzz-raw://a48dcb8a77b6565fc05fa2803e6c746ebaab5dd2018a97c63ecdbc0be92a1de6",
				"dweb:/ipfs/QmaFtBVVA6ZavKiJzfxatYBDyVinoSftMD7WELsWEg54ws"
			]
		},
		"contracts/Coordinator.sol": {
			"keccak256": "0xe71315e9aa78d95f782f4b7392cb27e8c059f72f8ca0bb7407a8d020fa77ab59",
			"license": "MIT",
			"urls": [
				"bzz-raw://ca9059ba5a505d11f890dd316ade712d9d637c148f9acc25699ea26b6276c959",
				"dweb:/ipfs/QmeKWrMCGJUuX1quCvzyYPgo7PpdEQU5rbsFty9n4beFuX"
			]
		},
		"contracts/CoreLib.sol": {
			"keccak256": "0xdfa4c55ebc4aa961f7c6015b1208eb05afe84013a1c4d69f6e433280c39c681d",
			"license": "MIT",
			"urls": [
				"bzz-raw://6de52402345cf1b441e9915b93d00846f3b936e7d3a340e057652cdf09daf0cb",
				"dweb:/ipfs/QmVkqhqMfgXTdu39j8iYUhCChJWQrjEq4dGk5gTVwAbtvA"
			]
		},
		"contracts/interfaces/IBooth.sol": {
			"keccak256": "0xb541258c0bd142e19737c0258d9b8add04d78cb9163d1b0470424ee99e7940bf",
			"license": "MIT",
			"urls": [
				"bzz-raw://da678193a76e6525905db4f6f0ddd566a0bd38e162919724a50086b83fd45679",
				"dweb:/ipfs/QmVgCCxFR3rUVtLV13AQ8hTzHimySk9xFobmCXxzQicGGH"
			]
		},
		"contracts/interfaces/ICoord.sol": {
			"keccak256": "0xfec2e677c6ba06645a75980b0c19259bf2ef5309600305e045b4e95dd463aeff",
			"license": "MIT",
			"urls": [
				"bzz-raw://af7898105d948633ba66fee8e5067659430995a9950dc5f61a10246737c77370",
				"dweb:/ipfs/QmTT5bc1uvsyrfUxndjvS5zYbPg9pKuwNDvTLXCnY7Egj1"
			]
		},
		"contracts/interfaces/ICore.sol": {
			"keccak256": "0x7192a71e026a43a97ec6b7874b45a38023862ad75ba46b955e021e617cdadc51",
			"license": "MIT",
			"urls": [
				"bzz-raw://cac340e584ae3b0f2f8a8f1953c974d86536ec5f769000819c4360966560be62",
				"dweb:/ipfs/QmeteAUstsDuyw4x3HGRTr14fS4KApu8zsZ2xhZrvWVyu5"
			]
		},
		"contracts/interfaces/IExe.sol": {
			"keccak256": "0x939ba072bc6f10dedc3e67512c18635fb9ef44463e54d3b4e23eceafaaf58277",
			"license": "MIT",
			"urls": [
				"bzz-raw://563238823dd3eb057f43cbc5b2c7e73ea50730b2ee7f21f7f748dd1ca33dcd46",
				"dweb:/ipfs/QmcM2PBc2uip7QnDyqFYFEuwHfZBSML5uc8tw6T4fiYJhJ"
			]
		},
		"contracts/interfaces/IProp.sol": {
			"keccak256": "0x562cbc9d32f62061d1bd2a41be4972c089cff97cadeba98474865ad50ba034d3",
			"license": "MIT",
			"urls": [
				"bzz-raw://067ee506e60693d2088b85d0bc565de4382dbf273ede94d7deeb493c9e95c701",
				"dweb:/ipfs/QmZ3Q8X489ifXs44jMyK2cqmffudRPWHEd28DwSbrgjyV4"
			]
		},
		"contracts/interfaces/IWeight.sol": {
			"keccak256": "0x36129e7cd0a2c95f317c9b74cc58f9ab58ca7d13a82ec64b01a874122aa9cf3f",
			"license": "MIT",
			"urls": [
				"bzz-raw://4f2c1e3d669fa84d7e09c3a752f8a270b258e9734a6058de42f40a65e30b483c",
				"dweb:/ipfs/QmS5iiGaLPxbXTA81RJ7ENyKwaqgXdq7z4esDVMgGjy2CM"
			]
		},
		"contracts/openZeppelin/Initializable.sol": {
			"keccak256": "0xc2c843c604c41fa6f583fca49458ed9682220f2833d8d9ad2c3f13c4b34732b6",
			"license": "MIT",
			"urls": [
				"bzz-raw://04b2502a1ea90927af6a9ee951d3a43af8419e45dba3b30b06589a8bd12470ea",
				"dweb:/ipfs/QmQvFuYk3b2aRBdaQieWz9tNuz14A5bEQLUcRSp55FbGH1"
			]
		},
		"contracts/test/Testable.sol": {
			"keccak256": "0xcc1cab5712de60230bfaa8b17f38365873b2d89a838a19acc417aef68490988c",
			"license": "MIT",
			"urls": [
				"bzz-raw://63700062ec761043590a9325d60dd321f56eb2635c050ad972c5399940bbe7d2",
				"dweb:/ipfs/QmWnjYoMsn75YBBZ9DHaAkzBVVDJWJNzHz7N2WhRqFH3kr"
			]
		},
		"contracts/test/Timer.sol": {
			"keccak256": "0x832393287482772ef054c22496f0b5481109fbd4015827f29252c4fd2ed3e418",
			"license": "MIT",
			"urls": [
				"bzz-raw://f9401dcc8c95d4b48f59d66387f7338e8d748150fe9a536182ef4165499f5a02",
				"dweb:/ipfs/QmbTxc3gBSCxFwRysgBZKhC3Ms4eDZR285ihAi6yxgX8uZ"
			]
		},
		"contracts/votingTypes/IVoteType.sol": {
			"keccak256": "0x8d6d4eb1b235e2e0ae74241fc76b29a0324a9109ef37d9ce7d393c7b10f2a10d",
			"license": "MIT",
			"urls": [
				"bzz-raw://36b0166be39aaa5d074047e5491e7adadc34c6627f3d45accea57c6907fd03ee",
				"dweb:/ipfs/QmbTAmT2EwBGD1avxhNaMg1EvEKNzRaeXXxAoFk2fdb1wJ"
			]
		}
	},
	"version": 1
}